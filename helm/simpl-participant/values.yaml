global:
  cors:
    allowOrigin: ""
  hostBe: "--- VALUE_MUST_CHANGE ---"
  hostTls: "--- VALUE_MUST_CHANGE ---"
  ingress:
    issuer: issuer-ingress
  profile: participant
  keystore:
    password: "participant"

keycloak:
  apiUrl: "--- VALUE_MUST_CHANGE ---"
  extraEnvVars:
    - name: KC_HOSTNAME_ADMIN
      value: "{{ .Values.apiUrl }}/auth"
    - name: KC_HOSTNAME
      value: "{{ .Values.apiUrl }}/auth"
    - name: USERS_ROLES_BASE_URL
      value: "--- VALUE_MUST_CHANGE ---"
    - name: KEYCLOAK_BASE_URL
      value: "{{ .Values.apiUrl }}/auth"
    - name: REALM
      value: "participant"
    - name: KEYCLOAK_EXTRA_ARGS
      value: --import-realm

  auth:
    adminPassword: "admin"

  postgresql:
    enabled: false

  externalDatabase:
    host: "--- VALUE_MUST_CHANGE ---"
    port: 5432
    user: keycloak
    database: keycloak
    password: "keycloak"
    existingSecret: ""
    existingSecretHostKey: ""
    existingSecretPortKey: ""
    existingSecretUserKey: ""
    existingSecretDatabaseKey: ""
    existingSecretPasswordKey: ""
    annotations: {}

  extraVolumes:
    - name: spi-volume
      emptyDir: {}
    - name: realm-volume
      emptyDir: {}

  extraVolumeMounts:
    - name: spi-volume
      mountPath: /opt/bitnami/keycloak/providers/keycloak-authenticator.jar
      subPath: keycloak-authenticator.jar
    - name: realm-volume
      mountPath: /opt/bitnami/keycloak/data/import/realm.json
      subPath: realm.json

  initContainers:
    - name: init-spi
      image: curlimages/curl
      command: ["/bin/sh", "-c"]
      env:
        - name: ARTIFACT
          value: keycloak-authenticator
        - name: URL
          value: https://code.europa.eu/api/v4/projects/915/packages/maven/com/aruba/simpl/keycloak-authenticator/0.6.0/keycloak-authenticator-0.6.0.jar
      args:
        - |
          curl -o /custom-spi/${ARTIFACT}.jar ${URL};
      volumeMounts:
        - name: spi-volume
          mountPath: /custom-spi

    - name: import-realm
      image: curlimages/curl
      command: ["/bin/sh", "-c"]
      env:
        - name: REALM_NAME
          value: realm
        - name: URL
          # uncomment below if you are deploying an authority
          # value: https://code.europa.eu/simpl/simpl-open/development/iaa/charts/-/raw/develop/keycloak/kc-init/authority-realm-export.json?ref_type=heads
          # uncomment below if you are deploying a participant
          value: https://code.europa.eu/simpl/simpl-open/development/iaa/charts/-/raw/develop/keycloak/kc-init/participant-realm-export.json?ref_type=heads
      args:
        - |
          curl -o /config/${REALM_NAME}.json ${URL};
      volumeMounts:
        - name: realm-volume
          mountPath: /config

simpl-cloud-gateway:
  keycloakUrl: "--- VALUE_MUST_CHANGE ---"
  usersRolesUrl: "--- VALUE_MUST_CHANGE ---"

  springRoutes:
    - id: keycloak
      uri: ${keycloak.url}
      predicates:
        - Path=/auth/**
      filters:
        - StripPrefix=1
    - id: users-roles
      uri: ${users-roles.url}
      predicates:
        - Path=/*/user-api/**
      filters:
        - StripPrefix=2

  swaggerUrls:
    - url: /public/user-api/v3/api-docs
      name: Users & Roles Service

  routes:
    publicUrls:
      - method: GET
        path: "/swagger-ui.html"
      - method: GET
        path: "/swagger-ui/**"
      - method: GET
        path: "/v3/api-docs/**"
      - method: GET
        path: "/actuator/**"

    rbac:
      - path: "private/user-api/agent/identity-attributes"
        method: GET
        roles:
          - T1UAR_M
      - path: "private/user-api/agent/identity-attributes/*"
        method: GET
        roles:
          - T1UAR_M
      - path: "private/user-api/identity-attribute/search"
        method: GET
        roles:
          - T1UAR_M
      - path: "private/user-api/role/*"
        method: GET
        roles:
          - T1UAR_M
      - path: "private/user-api/role"
        method: PUT
        roles:
          - T1UAR_M
      - path: "private/user-api/role/*/identity-attributes"
        method: POST
        roles:
          - T1UAR_M
      - path: "private/user-api/role/delete-attribute"
        method: DELETE
        roles:
          - T1UAR_M
      - path: "private/user-api/role/*"
        method: DELETE
        roles:
          - T1UAR_M
      - path: "private/user-api/role/search"
        method: GET
        roles:
          - T1UAR_M
      - path: "private/user-api/role/*/duplicate-identity-attribute"
        method: POST
        roles:
          - T1UAR_M
      - path: "private/user-api/user/as-t1user"
        method: POST
        roles:
          - T1UAR_M
      - path: "private/user-api/user/*"
        method: GET
        roles:
          - T1UAR_M
      - path: "private/user-api/user/*"
        method: PUT
        roles:
          - T1UAR_M
      - path: "private/user-api/user/*"
        method: DELETE
        roles:
          - T1UAR_M

simpl-fe:
  hostFe: "--- VALUE_MUST_CHANGE ---"
  cors:
    allowOrigin: "--- VALUE_MUST_CHANGE ---"
  ingress:
    issuer: issuer-ingress

  env:
  - name: API_URL
    value: "--- VALUE_MUST_CHANGE ---"
  - name: KEYCLOAK_URL
    value: "--- VALUE_MUST_CHANGE ---"
  - name: KEYCLOAK_REALM
    value: "participant"
  - name: KEYCLOAK_CLIENT_ID
    value: "frontend-cli"

  microfrontends:
  - name: usersroles
    application: usersandroles
    path: "/users-roles"
  - name: participant
    application: participant-utility
    path: "/participant-utility"

users-roles:
  db:
    url: "--- VALUE_MUST_CHANGE ---"
    username: "usersroles"
    password: "usersroles"

  redis:
    host: "--- VALUE_MUST_CHANGE ---"
    port: "6379"
    username: "default"
    password: "admin" # update this

  keycloak:
    master:
      user: "user"
      password: "admin"


postgresql:
  primary:
    initdb:
      scripts:
        init.sql: |
          CREATE USER keycloak WITH PASSWORD 'keycloak' CREATEDB;
          CREATE DATABASE keycloak OWNER keycloak;
          CREATE USER usersroles WITH PASSWORD 'usersroles' CREATEDB;
          CREATE DATABASE usersroles OWNER usersroles;
          CREATE USER authenticationprovider WITH PASSWORD 'authenticationprovider' CREATEDB;
          CREATE DATABASE authenticationprovider OWNER authenticationprovider;


redis:
  auth:
    password: "admin"

authentication-provider:
  simpl:
    certificate:
      san: "--- VALUE_MUST_CHANGE ---"

