[tools]
java = "21"
mvnd = "1.0.3"
jq = "1.8.1"
docker-compose = "2.39.4"
kubectl = "1.34.1"
docker-cli = "28.4.0"
helm = "3.19.0"
kubectx = "0.9.5"
kubens = "0.9.5"
minikube = "1.37.0"
yq = "4.47.2"

[vars]
pathSimplRepo = "./simpl-repo"
pathSimplBackend = "{{vars.pathSimplRepo}}/backend"
pathHelmLocalAuthority = "{{vars.pathSimplRepo}}/docs/charts/app-values/local/local-authority"

[tasks."initialization:project"]
description = "Initializes the entire project environment by executing the following subtasks:"
run = [
  { task = "initialization:code" },
  { task = "initialization:cluster" },
  { task = "initialization:build:code" },
]

[tasks."destruction:all"]
description = "Completely removes the development environment:"
run = [
  { tasks = [ "cluster:destroy", "cluster:forward-node-down", "cluster:redpanda:down", "zscaler:remove-jdk" ] },
]

[tasks."initialization:build:code"]
description = "Builds all projects without executing tests using Maven (`mvnd`)."
run = [
  { task = "code:build:no-test" },
]

[tasks."initialization:code"]
description = "Initializes git submodules and updates all projects."
run = [
  { task = "git:init" },
  { task = "git:update-all" },
]

[tasks."initialization:cluster"]
description = "Creates the Minikube cluster, configures port forwarding, and installs or upgrades the authority chart."
run = [
  { task = "cluster:create" },
  { task = "cluster:forward-node-up" },
  { task = "cluster:authority-install-or-upgrade" },
  { task = "cluster:redpanda:up" },
]

[tasks."initialization:zscaler"]
description = "Configures the environment for Z-Scaler certificates:"
run = [
  { tasks = [ "zscaler:install-jdk", "zscaler:install-cluster" ] }
]

[tasks."jqlog"]
description = "Formats JSON log output to a readable line-by-line format using `jq`."
raw = true
quiet = true
run = """
jq --unbuffered -r -R '. as $line | try (fromjson | "\\(.timestamp) \\(.micro // "") \\(.level) \\(.message) \\(."error.stack_trace" // "")") catch $line'
"""

[tasks."code:fmt"]
description = "Formats the code using Spotless."
run = "mvnd -f {{vars.pathSimplBackend}} spotless:apply"

[tasks."code:build"]
description = "Builds all projects with Maven, including tests."
run = "mvnd -Dmvnd.connectTimeout=100000 clean install -fae -f {{vars.pathSimplBackend}}"

[tasks."code:build:no-test"]
description = "Builds all projects but skips tests and license downloads."
run = "mise run code:build --fail-never -Dlicense.skipDownloadLicenses -Dmaven.test.skip"

[tasks."code:test-automation:run-by-tag"]
description = "Runs automation tests filtered by Cucumber tags."
run = "mvnd -f {{vars.pathSimplBackend}}/tests/test-automation resources:resources resources:testResources compiler:compile compiler:testCompile surefire:test -Dcucumber.filter.tags={{arg(name=\"tags\")}}"

[tasks."cluster:k"]
run = "kubectl"

[tasks."code:test-automation:autoconfigure-client-secret"]
shell = "bash -c"
run = [
"""
function getsecret() {
  local realm="$1"
     (
  kubectl exec -n local-authority local-authority-keycloak-0 -i -- bash -b << EOF
  /opt/bitnami/keycloak/bin/kcadm.sh config credentials \
         --config /tmp/kcadm.config \
         --server http://localhost:8080 \
         --realm master \
         --client admin-cli \
         --user admin \
         --password admin
  
  /opt/bitnami/keycloak/bin/kcadm.sh get clients \
         -r "$realm" \
         -q clientId=cli \
         --config /tmp/kcadm.config
EOF
  ) | jq -r .[].secret 
}
secret_authority="$(getsecret authority)"
secret_consumer="$(getsecret consumer)"
out={{vars.pathSimplBackend}}/tests/test-automation/src/test/resources/environments/environments-local.yaml
echo "Output file: $out"
echo "Secret authority: $secret_authority"
echo "Secret participant: $secret_consumer"
yq eval '.environments[].service-accounts[0].secret = "'$secret_authority'"' -i {{vars.pathSimplBackend}}/tests/test-automation/src/test/resources/environments/environments-local.yaml
yq eval '.environments[].service-accounts[1].secret = "'$secret_consumer'"' -i {{vars.pathSimplBackend}}/tests/test-automation/src/test/resources/environments/environments-local.yaml
""",
]

[tasks."cluster:forward-node-compose"]
description = "Runs the Docker Compose file for port forwarding."
run = "docker-cli-plugin-docker-compose -f .config/docker/forward-node/docker-compose.yaml -p simpl-portforward"

[tasks."cluster:forward-node-up"]
description = "Starts port forwarding services."
run = "mise r cluster:forward-node-compose up -d"

[tasks."cluster:redpanda:compose"]
run = "docker-cli-plugin-docker-compose -p simpl-redpanda -f .config/docker/redpanda/docker-compose.yaml"

[tasks."cluster:redpanda:up"]
run = "docker-cli-plugin-docker-compose -p simpl-redpanda -f .config/docker/redpanda/docker-compose.yaml up -d"

[tasks."cluster:redpanda:down"]
run = "docker-cli-plugin-docker-compose -p simpl-redpanda -f .config/docker/redpanda/docker-compose.yaml down"

[tasks."cluster:forward-node-down"]
description = "Shuts down all port forwards."
run = "mise r cluster:forward-node-compose down -v"

[tasks."cluster:create"]
description = "Starts Minikube with a dedicated Docker network and profile."
run = "minikube start --namespace local-authority --network=simpl-network --driver=docker --profile=simpl-control-plane"

[tasks."cluster:destroy"]
description = "Deletes the Minikube cluster."
run = [
  { task = "cluster:forward-node-down" },
  "minikube delete --profile=simpl-control-plane",
  { task = "cluster:redpanda:down" },
]

[tasks."cluster:start"]
description = "Starts the Minikube cluster and sets up port forwarding."
run = [
  { task = "cluster:forward-node-down" },
  "minikube start --namespace local-authority --network=simpl-network --driver=docker --profile=simpl-control-plane",
  { task = "cluster:forward-node-up" },
  { task = "cluster:redpanda:up" },
]

[tasks."cluster:status"]
description = "Shows the status of the Minikube cluster."
run = [
  "minikube status --profile=simpl-control-plane",
  { task = "cluster:forward-node-compose ps" },
  { task = "cluster:redpanda:compose ps" },
]

[tasks."cluster:stop"]
description = "Stops the Minikube cluster and disables port forwarding."
run = [
  { task = "cluster:forward-node-down" },
  "minikube stop --profile=simpl-control-plane",
  { task = "cluster:redpanda:down" },
]
[tasks."cluster:restart"]
run = [
  { task = "cluster:stop" },
  { task = "cluster:start" },
]

[tasks."cluster:bash"]
description = "Opens a shell inside the Minikube control plane container."
run = "docker exec -it simpl-control-plane bash"

[tasks."cluster:dashboard"]
run = "minikube -p simpl-control-plane dashboard"

[tasks."cluster:authority-install-or-upgrade"]
description = "Installs or upgrades the local authority Helm chart and switches namespace."
run = [
  """
  helm upgrade \
  -i \
  --dependency-update \
  --create-namespace \
  -n local-authority \
  local-authority \
  {{vars.pathHelmLocalAuthority}}
  """,
 "kubens local-authority",
 { task = "cluster:kube-redpanda-scale-0" },
]

[tasks."cluster:kube-redpanda-scale-0"]
 run = [
   "kubectl -n local-authority scale --replicas 0 deployment.apps/redpanda",
   "kubectl -n local-authority scale --replicas 0 deployment.apps/redpanda-console",
 ]

[tasks."cluster:authority-uninstall"]
description = "Uninstalls the authority Helm chart."
run = "helm uninstall local-authority"

[tasks."cluster:pods"]
run = "kubectl get -n local-authority pod"

[tasks."cluster:deployments"]
run = "kubectl get -n local-authority deployments"

[tasks."zscaler:install-cluster"]
description = "Installs Z-Scaler certificates inside the Minikube cluster."
run = [
  "docker cp .config/certs/zscaler-ca.pem simpl-control-plane:usr/local/share/ca-certificates/zscaler-ca.crt",
  "docker exec simpl-control-plane update-ca-certificates",
]

[tasks."git:init"]
description = "Initializes git submodules."
run = "git submodule init"

[tasks."git:update-all"]
description = "Updates all submodules recursively to the latest remote commits."
run = "git submodule update --remote --recursive"

[tasks."micro:run:authority-authenticationprovider".env]
SPRING_PROFILES_ACTIVE = "local-authority"
CRYPTO_SECRETKEYBASE64 = "KdSucCE6DSRFThqxv2frvx1h84HPFEy4ocEFwFDJC8A"
[tasks."micro:run:authority-authenticationprovider"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :authenticationprovider spring-boot:run"

[tasks."micro:run:consumer-authenticationprovider".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
CRYPTO_SECRETKEYBASE64 = "KdSucCE6DSRFThqxv2frvx1h84HPFEy4ocEFwFDJC8A"
[tasks."micro:run:consumer-authenticationprovider"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :authenticationprovider spring-boot:run"

[tasks."micro:run:authority-identityprovider".env]
SPRING_PROFILES_ACTIVE = "local"
[tasks."micro:run:authority-identityprovider"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :identity-provider spring-boot:run"

[tasks."micro:run:authority-onboarding".env]
SPRING_PROFILES_ACTIVE = "local"
[tasks."micro:run:authority-onboarding"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :onboarding spring-boot:run"

[tasks."micro:run:authority-securityattributesprovider".env]
SPRING_PROFILES_ACTIVE = "local"
[tasks."micro:run:authority-securityattributesprovider"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :security-attributes-provider spring-boot:run"

[tasks."micro:run:authority-tierone".env]
SPRING_PROFILES_ACTIVE = "local-authority"
[tasks."micro:run:authority-tierone"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :tier1-gateway spring-boot:run"

[tasks."micro:run:consumer-tierone".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
[tasks."micro:run:consumer-tierone"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :tier1-gateway spring-boot:run"

[tasks."micro:run:authority-tiertwo".env]
SPRING_PROFILES_ACTIVE = "local-authority"
[tasks."micro:run:authority-tiertwo"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :tier2-gateway spring-boot:run"

[tasks."micro:run:consumer-tiertwo".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
[tasks."micro:run:consumer-tiertwo"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :tier2-gateway spring-boot:run"

[tasks."micro:run:authority-usersroles".env]
SPRING_PROFILES_ACTIVE = "local-authority"
[tasks."micro:run:authority-usersroles"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :usersroles spring-boot:run"

[tasks."micro:run:consumer-usersroles".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
[tasks."micro:run:consumer-usersroles"]
run = "mvnd -Dmvnd.connectTimeout=100000 -f {{vars.pathSimplBackend}} -pl :usersroles spring-boot:run"

[tasks."zscaler:install-jdk"]
description = "Imports Z-Scaler CA into the Java keystore."
run = "keytool -importcert -trustcacerts -alias zscaler-ca -file .config/certs/zscaler-ca.pem -keystore {{env.JAVA_HOME}}/lib/security/cacerts -storepass changeit -noprompt"

[tasks."zscaler:remove-jdk"]
description = "Removes the Z-Scaler CA from the Java keystore."
run = "keytool -delete -alias zscaler-ca -keystore {{env.JAVA_HOME}}/lib/security/cacerts -storepass changeit"

[env]
PROJECT_RELEASE_VERSION = "2.5.0-RC"
KUBECONFIG = "./.config/.kube/config"

#Database
SIMPL_DB_PORT_FORWARD = "55432"
