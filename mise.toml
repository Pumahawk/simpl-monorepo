[tools]
java = "21"
mvnd = "1.0.3"
jq = "1.8.1"
docker-compose = "2.39.4"
kubectl = "1.34.1"
docker-cli = "28.4.0"
helm = "3.19.0"
kubectx = "0.9.5"
kubens = "0.9.5"
minikube = "1.37.0"
yq = "4.47.2"

[vars]
pathSimplRepo = "./simpl-repo"
pathSimplBackend = "{{vars.pathSimplRepo}}/backend"
pathHelmLocalAuthority = "{{vars.pathSimplRepo}}/docs/charts/app-values/local/local-authority"

run_mise_code_build = "mvnd -Dmvnd.connectTimeout=100000 clean install -fae -f {{vars.pathSimplBackend}}"
run_cluster_forward_node_compose = "docker-cli-plugin-docker-compose -f .config/docker/forward-node/docker-compose.yaml -p simpl-portforward"

zscaler_enabled = false
keycloak_secrets_wait = "1"

lib_keycloak = """
function echokpod() {
  echo -e "\\n‚è≥ Waiting for \\033[1;33mKeycloak\\033[0m status to become \\033[1;32mReady\\033[0m..."
  kubectl -n local-authority get statefulset | grep --color=always -E -e $ -e keycloak
  kubectl -n local-authority get pod | grep --color=always -E -e $ -e keycloak
}

function waitkpod() {
    local wait=$1
    for (( i = 0; i < $wait; i++ )); do
      echokpod
      if kubectl wait -n local-authority --for=jsonpath='{.status.availableReplicas}'=1 statefulset.apps/local-authority-keycloak --timeout=10s 2>/dev/null; then
        return 0
      fi
    done
    return 1
}

function getsecret() {
  local realm="$1"
     (
  >&2  echo "Retrieve secret $realm"
  kubectl exec -n local-authority local-authority-keycloak-0 -i -- bash -eb << EOF
  /opt/bitnami/keycloak/bin/kcadm.sh get clients \
         -r "$realm" \
         -q clientId=cli \
         --config /tmp/kcadm.config
EOF
  ) | jq -r .[].secret 
}

function keylogin() {
  kubectl exec -n local-authority local-authority-keycloak-0 -i -- bash -eb << EOF
    >&2 echo "Login to keycloak admin..."
    /opt/bitnami/keycloak/bin/kcadm.sh config credentials \
           --config /tmp/kcadm.config \
           --server http://localhost:8080 \

           --realm master \
           --client admin-cli \
           --user admin \
           --password admin
EOF
}

function keycloak_update_attribute() {
  local realm="$1"
  local key="$2"
  local value="$3"
  kubectl exec -n local-authority local-authority-keycloak-0 -i -- bash -eb << EOF
  echo "Setting property [realm=$realm] [key=$key] [value=$value]"
  /opt/bitnami/keycloak/bin/kcadm.sh update "realms/$realm" \
    --config /tmp/kcadm.config \
    -s "$key=$value"
EOF
}
"""


[tasks."initialization:project"]
description = "Initializes the entire project environment by executing the following subtasks:"
run = [
  { task = "initialization:code" },
  { task = "initialization:cluster" },
  { task = "initialization:build:code" },
]

[tasks."destruction:all"]
description = "Completely removes the development environment:"
run = [
  { tasks = [ "cluster:destroy", "cluster:forward-node-down", "cluster:redpanda:down", "zscaler:remove-jdk" ] },
]

[tasks."initialization:build:code"]
description = "Builds all projects without executing tests using Maven (`mvnd`)."
run = [
  { task = "code:build:no-test" },
]

[tasks."initialization:code"]
description = "Initializes git submodules and updates all projects."
run = [
  { task = "git:init" },
  { task = "git:update-all" },
]

[tasks."initialization:cluster"]
description = "Creates the Minikube cluster, configures port forwarding, and installs or upgrades the authority chart."
run = [
  { task = "cluster:create" },
  { task = "initialization:zscaler" },
  { task = "cluster:forward-node-up" },
  { task = "cluster:redpanda:up" },
  { task = "cluster:authority-install-or-upgrade" },
  { task = "code:test-automation:autoconfigure-client-secret" },
  { task = "cluster:keycloak-autoconfigure" },
]

[tasks."initialization:zscaler"]
description = "Configures the environment for Z-Scaler certificates:"
run = [
  { tasks = [ "zscaler:install-jdk", "zscaler:install-cluster" ] }
]

[tasks."jqlog"]
description = "Formats JSON log output to a readable line-by-line format using `jq`."
raw = true
quiet = true
run = """
jq --unbuffered -r -R '. as $line | try (fromjson | "\\(.timestamp) \\(.micro // "") \\(.level) \\(.message) \\(."error.stack_trace" // "")") catch $line'
"""

[tasks."code:fmt"]
description = "Formats the code using Spotless."
run = "mvnd -f {{vars.pathSimplBackend}} spotless:apply"

[tasks."code:build"]
description = "Builds all projects with Maven, including tests."
run = [
  "mvnd --stop",
  "mvnd -Dmvnd.connectTimeout=100000 clean install -fae -f {{vars.pathSimplBackend}}",
 ]

[tasks."code:build:no-test"]
description = "Builds all projects but skips tests and license downloads."
run = [
  "mvnd --stop",
  "{{vars.run_mise_code_build}} --fail-never -Dlicense.skipDownloadLicenses -Dmaven.test.skip",
]

[tasks."code:test-automation:run-by-tag"]
description = "Runs automation tests filtered by Cucumber tags."
run = "mvnd -f {{vars.pathSimplBackend}}/tests/test-automation resources:resources resources:testResources compiler:compile compiler:testCompile surefire:test -Dcucumber.filter.tags={{arg(name=\"tags\")}}"

[tasks."code:test-automation:restart-postgrest"]
shell = "bash -ec"
run = """
echo -e "Restart \\e[33mPostgREST\\e[0m deployments"
kubectl -n local-authority rollout restart $(kubectl -n local-authority get deployments -oname | grep postgrest)
"""

[tasks."code:test-automation:run-all"]
shell = "bash -c"
run = [
  { task = "code:test-automation:restart-postgrest" },
  "sleep 30",
  "mvnd -f {{vars.pathSimplBackend}}/tests/test-automation clean test allure:report",
]

[tasks."code:test-automation:allure-report-serve"]
run = "mvnd -f {{vars.pathSimplBackend}}/tests/test-automation allure:serve"

[tasks."cluster:k"]
run = "kubectl"

[tasks."code:test-automation:autoconfigure-client-secret"]
shell = "bash -ec"
run = [
"""
echo "Wait Keycloak"
{{vars.lib_keycloak}}
if ! waitkpod {{vars.keycloak_secrets_wait}}; then
    echo "Keycloak pod not ready."
    echo "Skipping initialization of secrets for automation testing."
    echo "Run manually: 'mise code:test-automation:autoconfigure-client-secret'"
    exit 0
fi

keylogin
secret_authority="$(getsecret authority)"
secret_consumer="$(getsecret consumer)"
out={{vars.pathSimplBackend}}/tests/test-automation/src/test/resources/environments/environments-local.yaml

echo "Output file: $out"
echo "Secret authority: $secret_authority"
echo "Secret consumer: $secret_consumer"
yq eval '.environments[0].service-accounts[].secret = "'$secret_authority'"' -i {{vars.pathSimplBackend}}/tests/test-automation/src/test/resources/environments/environments-local.yaml
yq eval '.environments[1].service-accounts[].secret = "'$secret_consumer'"' -i {{vars.pathSimplBackend}}/tests/test-automation/src/test/resources/environments/environments-local.yaml
""",
]

[tasks."cluster:forward-node-compose"]
description = "Runs the Docker Compose file for port forwarding."
run = "{{vars.run_cluster_forward_node_compose}}"

[tasks."cluster:forward-node-up"]
description = "Starts port forwarding services."
run = "{{vars.run_cluster_forward_node_compose}} up -d"

[tasks."cluster:redpanda:compose"]
run = "docker-cli-plugin-docker-compose -p simpl-redpanda -f .config/docker/redpanda/docker-compose.yaml"

[tasks."cluster:redpanda:up"]
run = "docker-cli-plugin-docker-compose -p simpl-redpanda -f .config/docker/redpanda/docker-compose.yaml up -d"

[tasks."cluster:redpanda:down"]
run = "docker-cli-plugin-docker-compose -p simpl-redpanda -f .config/docker/redpanda/docker-compose.yaml down"

[tasks."cluster:forward-node-down"]
description = "Shuts down all port forwards."
run = "{{vars.run_cluster_forward_node_compose}} down -v"

[tasks."cluster:create"]
description = "Starts Minikube with a dedicated Docker network and profile."
run = "minikube start --namespace local-authority --network=simpl-network --driver=docker --profile=simpl-control-plane"

[tasks."cluster:destroy"]
description = "Deletes the Minikube cluster."
run = [
  { task = "cluster:forward-node-down" },
  "minikube delete --profile=simpl-control-plane",
  { task = "cluster:redpanda:down" },
]

[tasks."cluster:start"]
description = "Starts the Minikube cluster and sets up port forwarding."
run = [
  { task = "cluster:forward-node-down" },
  "minikube start --namespace local-authority --network=simpl-network --driver=docker --profile=simpl-control-plane",
  { task = "cluster:forward-node-up" },
  { task = "cluster:redpanda:up" },
]

[tasks."cluster:status"]
description = "Shows the status of the Minikube cluster."
run = [
  "minikube status --profile=simpl-control-plane",
  { task = "cluster:forward-node-compose ps" },
  { task = "cluster:redpanda:compose ps" },
]

[tasks."cluster:stop"]
description = "Stops the Minikube cluster and disables port forwarding."
run = [
  { task = "cluster:forward-node-down" },
  "minikube stop --profile=simpl-control-plane",
  { task = "cluster:redpanda:down" },
]
[tasks."cluster:restart"]
run = [
  { task = "cluster:stop" },
  { task = "cluster:start" },
]

[tasks."cluster:bash"]
description = "Opens a shell inside the Minikube control plane container."
run = "docker exec -it simpl-control-plane bash"

[tasks."cluster:dashboard"]
run = "minikube -p simpl-control-plane dashboard"

[tasks."cluster:authority-install-or-upgrade"]
description = "Installs or upgrades the local authority Helm chart and switches namespace."
run = [
  """
  helm upgrade \
  -i \
  --dependency-update \
  --create-namespace \
  -n local-authority \
  local-authority \
  {{vars.pathHelmLocalAuthority}}
  """,
 "kubens local-authority",
 { task = "cluster:kube-redpanda-scale-0" },
]

[tasks."cluster:kube-redpanda-scale-0"]
 run = [
   "kubectl -n local-authority scale --replicas 0 deployment.apps/redpanda",
   "kubectl -n local-authority scale --replicas 0 deployment.apps/redpanda-console",
 ]

[tasks."cluster:authority-uninstall"]
description = "Uninstalls the authority Helm chart."
run = "helm uninstall local-authority"

[tasks."cluster:pods"]
run = "kubectl get -n local-authority pod"

[tasks."cluster:deployments"]
run = "kubectl get -n local-authority deployments"

[tasks."cluster:keycloak-autoconfigure"]
shell = "bash -ec"
run = """
{{vars.lib_keycloak}}
if ! waitkpod {{vars.keycloak_secrets_wait}} ; then
    echo "Keycloak pod not ready."
    echo "Skipping keycloak environment configuration"
    echo "Run manually: 'mise cluster:keycloak-autoconfigure'"
    exit 0
fi
keylogin
keycloak_update_attribute authority attributes.frontendUrl http://localhost:8100/auth
keycloak_update_attribute consumer attributes.frontendUrl http://localhost:8200/auth
"""

[tasks."zscaler:install-cluster"]
shell = "bash -ec"
description = "Installs Z-Scaler certificates inside the Minikube cluster."
run = [
"""
  {% if vars.zscaler_enabled %}
  docker cp .config/certs/zscaler-ca.pem simpl-control-plane:usr/local/share/ca-certificates/zscaler-ca.crt
  docker exec simpl-control-plane update-ca-certificates
  {% else %}
  echo "Skip z-scaler cluster installation"
  {% endif %}
"""
]

[tasks."git:init"]
description = "Initializes git submodules."
run = "git submodule init"

[tasks."git:update-all"]
description = "Updates all submodules recursively to the latest remote commits."
run = "git submodule update --remote --recursive"

[tasks."micro:run:authority-authenticationprovider".env]
SPRING_PROFILES_ACTIVE = "local-authority"
CRYPTO_SECRETKEYBASE64 = "KdSucCE6DSRFThqxv2frvx1h84HPFEy4ocEFwFDJC8A"
[tasks."micro:run:authority-authenticationprovider"]
dir = "{{vars.pathSimplBackend}}/microservices/authentication_provider"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:consumer-authenticationprovider".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
CRYPTO_SECRETKEYBASE64 = "KdSucCE6DSRFThqxv2frvx1h84HPFEy4ocEFwFDJC8A"
[tasks."micro:run:consumer-authenticationprovider"]
dir = "{{vars.pathSimplBackend}}/microservices/authentication_provider"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:authority-identityprovider".env]
SPRING_PROFILES_ACTIVE = "local"
[tasks."micro:run:authority-identityprovider"]
dir = "{{vars.pathSimplBackend}}/microservices/identity-provider"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:authority-onboarding".env]
SPRING_PROFILES_ACTIVE = "local"
[tasks."micro:run:authority-onboarding"]
dir = "{{vars.pathSimplBackend}}/microservices/onboarding"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:authority-securityattributesprovider".env]
SPRING_PROFILES_ACTIVE = "local"
[tasks."micro:run:authority-securityattributesprovider"]
dir = "{{vars.pathSimplBackend}}/microservices/security-attributes-provider"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:authority-tierone".env]
SPRING_PROFILES_ACTIVE = "local-authority"
[tasks."micro:run:authority-tierone"]
dir = "{{vars.pathSimplBackend}}/microservices/tier1-gateway"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:consumer-tierone".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
[tasks."micro:run:consumer-tierone"]
dir = "{{vars.pathSimplBackend}}/microservices/tier1-gateway"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:authority-tiertwo".env]
SPRING_PROFILES_ACTIVE = "local-authority"
[tasks."micro:run:authority-tiertwo"]
dir = "{{vars.pathSimplBackend}}/microservices/tier2-gateway"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:consumer-tiertwo".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
[tasks."micro:run:consumer-tiertwo"]
dir = "{{vars.pathSimplBackend}}/microservices/tier2-gateway"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:authority-usersroles".env]
SPRING_PROFILES_ACTIVE = "local-authority"
[tasks."micro:run:authority-usersroles"]
dir = "{{vars.pathSimplBackend}}/microservices/users-roles"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."micro:run:consumer-usersroles".env]
SPRING_PROFILES_ACTIVE = "local-consumer"
[tasks."micro:run:consumer-usersroles"]
dir = "{{vars.pathSimplBackend}}/microservices/users-roles"
shell="bash -ec"
run = "java -jar target/$(ls target | grep -E \\*\\.jar$)"
# run = "mvnd -Dmvnd.connectTimeout=100000 spring-boot:run"

[tasks."zscaler:install-jdk"]
shell = "bash -ec"
description = "Imports Z-Scaler CA into the Java keystore."
run = """
  {% if vars.zscaler_enabled %}
  keytool -importcert -trustcacerts -alias zscaler-ca -file .config/certs/zscaler-ca.pem -keystore '{{env.JAVA_HOME}}/lib/security/cacerts' -storepass changeit -noprompt || echo "Unable to install zcaler-ca"
  {% else %}
  echo "Skip z-scaler jdk configuration"
  {% endif %}
"""

[tasks."zscaler:remove-jdk"]
shell = "bash -ec"
description = "Removes the Z-Scaler CA from the Java keystore."
run = """
if ! keytool -delete -alias zscaler-ca -keystore '{{env.JAVA_HOME}}/lib/security/cacerts' -storepass changeit; then
  echo "Unable to remove zscaler-ca from jdk"
fi
"""

[env]
PROJECT_RELEASE_VERSION = "2.6.0-RC"
KUBECONFIG = "./.config/.kube/config"

#Database
SIMPL_DB_PORT_FORWARD = "55432"
